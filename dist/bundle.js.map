{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/main.ts","src/patterns/Command/Client.ts","src/patterns/Command/Commands/ResetCommand.ts","src/patterns/Command/Commands/StartCommand.ts","src/patterns/Command/Commands/StopCommand.ts","src/patterns/Command/Comp.ts","src/patterns/Command/Invoker/UserInvoker.ts","src/patterns/Decorator/Boverage.ts","src/patterns/Decorator/Client.ts","src/patterns/Decorator/CondimentDecorato.ts","src/patterns/Decorator/decorators/Soy.ts","src/patterns/Decorator/decorators/Whip.ts","src/patterns/Decorator/drinks/Expresso.ts","src/patterns/Observer/Client.ts","src/patterns/Observer/Observable/WheaterData.ts","src/patterns/Observer/Observers/AverageConditionsDisplay.ts","src/patterns/Observer/Observers/CurrentConditionsDisplay.ts","src/patterns/Strategy/Behaviors/Fly/MegaFlyBehavior.ts","src/patterns/Strategy/Behaviors/Fly/SimpleFlyBehavior.ts","src/patterns/Strategy/Behaviors/Quack/SimpleQuackBehavior.ts","src/patterns/Strategy/Behaviors/Swim/SimpleSwimBehavior.ts","src/patterns/Strategy/Client.ts","src/patterns/Strategy/Duck.ts","src/patterns/Strategy/MallardDuck.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import './patterns/Strategy/Client';\r\nimport './patterns/Observer/Client';\r\nimport './patterns/Decorator/Client';\r\nimport './patterns/Command/Client';\r\n\r\n","import { Comp } from './Comp';\r\nimport { UserInvoker } from './Invoker/UserInvoker';\r\nimport { StartCommand } from './Commands/StartCommand';\r\nimport { StopCommand } from './Commands/StopCommand';\r\nimport { ResetCommand } from './Commands/ResetCommand';\r\n\r\n\r\n  let c = new Comp();\r\n  let user = new UserInvoker(new StartCommand(c), new StopCommand(c), new ResetCommand(c));\r\n  user.startComputer();\r\n  user.stopComputer();\r\n  user.resetComputer();","import { Command } from './../Interfaces/Command';\r\nimport { Comp } from '../Comp';\r\n\r\nexport class ResetCommand implements Command{\r\n\r\n    comp: Comp\r\n\r\n    constructor(comp: Comp){\r\n        this.comp = comp;\r\n    }\r\n\r\n    execute(){\r\n        this.comp.reset();\r\n    }\r\n}","import { Command } from './../Interfaces/Command';\r\nimport { Comp } from '../Comp';\r\n\r\nexport class StartCommand implements Command{\r\n\r\n    comp: Comp\r\n\r\n    constructor(comp: Comp){\r\n        this.comp = comp;\r\n    }\r\n\r\n    execute(){\r\n        this.comp.start();\r\n    }\r\n}","import { Command } from './../Interfaces/Command';\r\nimport { Comp } from '../Comp';\r\n\r\nexport class StopCommand implements Command{\r\n\r\n    comp: Comp\r\n\r\n    constructor(comp: Comp){\r\n        this.comp = comp;\r\n    }\r\n\r\n    execute(){\r\n        this.comp.stop();\r\n    }\r\n}","\r\nexport class Comp {\r\n    start(): any {\r\n        console.log('Start');\r\n    }\r\n\r\n    stop(): any {\r\n        console.log('Stop');\r\n    }\r\n\r\n    reset(): any {\r\n        console.log('Reset');\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { Command } from './../Interfaces/Command';\r\nexport class UserInvoker {\r\n\r\n    start: Command;\r\n    stop: Command;\r\n    reset: Command;\r\n\r\n    constructor(start: Command, stop: Command, reset: Command) {\r\n        this.start = start;\r\n        this.stop = stop;\r\n        this.reset = reset;\r\n    }\r\n\r\n    startComputer(): any{\r\n        this.start.execute()\r\n    }\r\n\r\n    stopComputer(): any{\r\n        this.stop.execute();\r\n    }\r\n\r\n    resetComputer(): any{\r\n        this.reset.execute();\r\n    }\r\n\r\n}","export abstract class Boverage {\r\n    description: string = 'Unknown description';\r\n\r\n    public getDescription(){\r\n        return this.description;\r\n    }\r\n\r\n    public abstract cost(): number;\r\n}\r\n\r\n\r\n","import { Expresso } from './drinks/Expresso';\r\nimport { Soy } from './decorators/Soy';\r\nimport { Whip } from './decorators/Whip';\r\nlet expresso = new Expresso();\r\nexpresso = new Soy(expresso);\r\nexpresso = new Whip(expresso);\r\nconsole.log(expresso.cost());\r\n\r\n","import {Boverage} from './Boverage';\r\nexport abstract class CondimentDecorator extends Boverage {\r\n    public abstract getDescription(): string;\r\n}\r\n","import {CondimentDecorator} from '../CondimentDecorato';\r\nimport {Boverage} from '../Boverage';\r\n\r\nexport class Soy extends CondimentDecorator {\r\n    beverage: Boverage;\r\n\r\n    constructor(beverage: Boverage){\r\n        super();\r\n        this.beverage = beverage;\r\n    }\r\n\r\n    getDescription(){\r\n        return this.beverage.getDescription() + ' , Soy';\r\n    }\r\n    cost(){\r\n        return .15 + this.beverage.cost();\r\n    }\r\n}\r\n","import {CondimentDecorator} from '../CondimentDecorato';\r\nimport {Boverage} from '../Boverage';\r\n\r\nexport class Whip extends CondimentDecorator {\r\n    beverage: Boverage;\r\n\r\n    constructor(beverage: Boverage){\r\n        super();\r\n        this.beverage = beverage;\r\n    }\r\n\r\n    getDescription(){\r\n        return this.beverage.getDescription() + ' , Whip';\r\n    }\r\n    cost(){\r\n        return .10 + this.beverage.cost();\r\n    }\r\n}\r\n","import {Boverage} from '../Boverage';\r\n\r\nexport class Expresso extends Boverage{\r\n    \r\n    constructor(){\r\n        super();\r\n        this.description = 'Espresso';\r\n    }\r\n\r\n    public cost(): number{\r\n        return 1.99;\r\n    }\r\n}\r\n","import { WheatherData } from './Observable/WheaterData';\r\nimport { AverageConditionsDisplay } from './Observers/AverageConditionsDisplay';\r\nimport { CurrentConditionsDisplay } from './Observers/CurrentConditionsDisplay';\r\n\r\nlet wheatherData = new WheatherData();\r\nlet averageConditionsDisplay = new AverageConditionsDisplay(wheatherData);\r\nlet currentConditionsDisplay = new CurrentConditionsDisplay(wheatherData);\r\n\r\nwheatherData.setMesurements(100,200,300);\r\nwheatherData.setMesurements(200,400,600);\r\nwheatherData.setMesurements(300,220,900);\r\n\r\n\r\n","import {IObserver} from '../Interfaces/IObserver';\r\nimport {IObservable} from '../Interfaces/IObservable';\r\n\r\nexport class WheatherData implements IObservable{\r\n    private observers: IObserver[];\r\n    private t: number;\r\n    private p: number;\r\n    private h: number;\r\n\r\n    constructor(){\r\n        this.observers = [];\r\n    }\r\n\r\n    registerObserver(o: IObserver){\r\n        this.observers.push(o);\r\n    }\r\n\r\n    unregisterObserver(o: IObserver){\r\n        let position: number = this.observers.indexOf(o);\r\n        delete this.observers[position];\r\n    }\r\n\r\n    notifyObservers(){\r\n        for(let i = 0; i < this.observers.length; i++ ){\r\n            this.observers[i].update(this.t, this.p, this.h);\r\n        }\r\n    }\r\n    \r\n    mesuarementsChanged(){\r\n        this.notifyObservers();\r\n    }\r\n    \r\n    setMesurements(t: number, p: number, h: number){\r\n        this.t = t;\r\n        this.p = p;\r\n        this.h = h;\r\n        this.mesuarementsChanged();\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","import {IObserver} from '../Interfaces/IObserver';\r\nimport {IDisplayElement} from '../Interfaces/IDisplayElement';\r\nimport {WheatherData} from '../Observable/WheaterData';\r\n\r\nexport class AverageConditionsDisplay implements IObserver, IDisplayElement{\r\n    averageT: number = 0;\r\n    averageP: number = 0;\r\n    averageH: number = 0;\r\n    timesToTry: number = 0;\r\n\r\n    private wheatherObject: WheatherData;\r\n    constructor(weatherObject: WheatherData){\r\n        this.wheatherObject = weatherObject;\r\n        weatherObject.registerObserver(this);\r\n    }\r\n\r\n    update(t:number, p:number, h:number){\r\n        this.averageT += t;\r\n        this.averageP += p;\r\n        this.averageH += h;\r\n        this.timesToTry++;\r\n        if(this.timesToTry % 3 === 0){\r\n            this.display();\r\n            this.averageT = 0;\r\n            this.averageP = 0;\r\n            this.averageH = 0;\r\n        }\r\n\r\n    }\r\n\r\n    display(){\r\n        let TIMES = 3;\r\n        console.log('The current condition:');\r\n        console.log('Average temperature:', this.averageT / TIMES);\r\n        console.log('Average pressure:', this.averageP / TIMES);\r\n        console.log('Average humidity:', this.averageH / TIMES);\r\n    }\r\n}\r\n","import {IObserver} from '../Interfaces/IObserver';\r\nimport {IDisplayElement} from '../Interfaces/IDisplayElement';\r\nimport {WheatherData} from '../Observable/WheaterData';\r\n\r\nexport class CurrentConditionsDisplay implements IObserver, IDisplayElement{\r\n    t: number;\r\n    p: number;\r\n    h: number;\r\n    private wheatherObject: WheatherData;\r\n    constructor(weatherObject: WheatherData){\r\n        this.wheatherObject = weatherObject;\r\n        weatherObject.registerObserver(this);\r\n    }\r\n\r\n    update(t:number, p:number, h:number){\r\n        this.t = t;\r\n        this.p = p;\r\n        this.h = h;\r\n        this.display();\r\n    }\r\n\r\n    display(){\r\n        console.log('The current condition:');\r\n        console.log('temperature:', this.t);\r\n        console.log('pressure:', this.p);\r\n        console.log('humidity:', this.h);\r\n    }\r\n}\r\n","\r\nimport {IFlyBehavior} from '../../Interfaces/IFlyBehavior';\r\n\r\nexport class MegaFlyBehavior implements IFlyBehavior{\r\n    fly(){\r\n        console.log('This is realisation of MEGA Fly Behavior.');\r\n    }\r\n}","import {IFlyBehavior} from '../../Interfaces/IFlyBehavior';\r\n\r\nexport class SimpleFlyBehavior implements IFlyBehavior{\r\n    fly(){\r\n        console.log('This is simple realisation of fly behavior');\r\n    }\r\n}","import {IQuackBehavior} from '../../Interfaces/IQuackBehavior';\r\n\r\nexport class SimpleQuackBehavior implements IQuackBehavior{\r\n    quack(){\r\n        console.log('This is simple realisation of quack behavior');\r\n    }\r\n}","import {ISwimBegavior} from '../../Interfaces/ISwimBegavior';\r\n\r\nexport class SimpleSwimBehavior implements ISwimBegavior{\r\n    swim(){\r\n        console.log('this is simple realisation of simple swim behavior');\r\n    }\r\n}","import { MallardDuck } from './../Strategy/MallardDuck';\r\nimport { MegaFlyBehavior } from './Behaviors/Fly/MegaFlyBehavior';\r\nlet duck = new MallardDuck();\r\nduck.swim();\r\nduck.quack();\r\nduck.fly();\r\n\r\nduck.setFlyBehavior(new MegaFlyBehavior());\r\nduck.fly();","import {IQuackBehavior} from './Interfaces/IQuackBehavior';\r\nimport {ISwimBegavior} from './Interfaces/ISwimBegavior';\r\nimport {IFlyBehavior} from './Interfaces/IFlyBehavior';\r\n\r\nexport abstract class Duck implements IQuackBehavior, ISwimBegavior, IFlyBehavior{\r\n    quackBehavior: IQuackBehavior;\r\n    swimBehavior: ISwimBegavior;\r\n    flyBehavior: IFlyBehavior;\r\n\r\n    // constructor(_quackBehavior:IQuackBehavior, _swimBehavior:ISwimBegavior, _flyBehavior:IFlyBehavior){\r\n    //     this.flyBehavior = _flyBehavior;\r\n    //     this.swimBehavior = _swimBehavior;\r\n    //     this.quackBehavior = _quackBehavior;\r\n    // }\r\n\r\n\r\n\r\n    public swim(name?:string): void{\r\n       this.swimBehavior.swim();\r\n    }\r\n\r\n    public quack() : void{\r\n        this.quackBehavior.quack();\r\n    }\r\n\r\n    public fly(): void{\r\n        this.flyBehavior.fly();\r\n    }\r\n\r\n    setSwimBehavior(_newSwimBehavior: ISwimBegavior){\r\n        this.swimBehavior = _newSwimBehavior;\r\n    }\r\n\r\n    setQuackBehavior(_newQuakBehavior: IQuackBehavior){\r\n        this.quackBehavior = _newQuakBehavior;\r\n    }\r\n\r\n    setFlyBehavior(_newFlyBehavior: IFlyBehavior){\r\n        this.flyBehavior = _newFlyBehavior;\r\n    }\r\n\r\n    abstract display(): void;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n","import {IFlyBehavior} from './Interfaces/IFlyBehavior';\r\nimport {IQuackBehavior} from './Interfaces/IQuackBehavior';\r\nimport {ISwimBegavior} from './Interfaces/ISwimBegavior';\r\nimport {SimpleFlyBehavior} from './Behaviors/Fly/SimpleFlyBehavior';\r\nimport {SimpleQuackBehavior} from './Behaviors/Quack/SimpleQuackBehavior';\r\nimport {SimpleSwimBehavior} from './Behaviors/Swim/SimpleSwimBehavior';\r\nimport {Duck} from './Duck';\r\n\r\nexport class MallardDuck extends Duck{\r\n    flyBehavior: IFlyBehavior;\r\n    quackBehavior: IQuackBehavior;\r\n    swimBehavior: ISwimBegavior;\r\n\r\n    constructor(){\r\n        super();\r\n        this.flyBehavior = new SimpleFlyBehavior();\r\n        this.quackBehavior = new SimpleQuackBehavior();\r\n        this.swimBehavior = new SimpleSwimBehavior()\r\n    }\r\n\r\n    display(){\r\n        console.log('Real Murrald duck display method');\r\n    }\r\n\r\n\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}